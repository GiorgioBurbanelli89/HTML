<!DOCTYPE html>
<html lang="es">
<head>
    <title>Editor de Dibujo CAD Básico</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta charset="UTF-8">
    <!-- Three.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/controls/OrbitControls.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #1e1e1e;
            color: white;
        }
        canvas {
            display: block;
            border: 1px solid #444;
            background-color: #2d2d2d; /* Fondo más visible para el canvas */
            cursor: crosshair;
            margin: 0 auto;
        }
        #container3D {
            border: 1px solid #444;
            background-color: #000000;
            cursor: none;
        }
        .active {
            background-color: #0066cc;
            color: white;
        }
        button {
            padding: 5px 10px;
            margin-right: 5px;
            cursor: pointer;
            margin-bottom: 5px;
            background-color: #333;
            color: white;
            border: 1px solid #444;
        }
        .btn-icono {
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #2c3e50;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 8px;
            margin: 3px;
        }
        .btn-icono.active {
            background-color: #3498db;
        }
        .btn-icono svg {
            margin-bottom: 4px;
            width: 24px;
            height: 24px;
        }
        
        /* Estilos para los controles de zoom */
        .zoom-controls {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            display: flex;
            flex-direction: column;
            gap: 5px;
            background-color: rgba(0,0,0,0.7);
            padding: 5px;
            border-radius: 5px;
        }
        
        .zoom-button {
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            background-color: #333;
            border: 1px solid #444;
            color: white;
            cursor: pointer;
            font-size: 18px;
        }
        
        /* Cursor 3D personalizado */
        .cursor3d {
            position: absolute;
            pointer-events: none;
            width: 20px;
            height: 20px;
            border: 2px solid white;
            border-radius: 50%;
        }
        .cursor3d::before,
        .cursor3d::after {
            content: '';
            position: absolute;
            background-color: white;
        }
        .cursor3d::before {
            width: 2px;
            height: 20px;
            left: 9px;
            top: 0;
        }
        .cursor3d::after {
            width: 20px;
            height: 2px;
            left: 0;
            top: 9px;
        }
        
        /* Indicador de origen */
        .origin-indicator {
            position: absolute;
            width: 10px;
            height: 10px;
            border: 2px solid yellow;
            border-radius: 50%;
            transform: translate(-50%, -50%);
            pointer-events: none;
        }
        .origin-indicator::before,
        .origin-indicator::after {
            content: '';
            position: absolute;
            background-color: yellow;
        }
        .origin-indicator::before {
            width: 1px;
            height: 10px;
            left: 4px;
            top: -5px;
        }
        .origin-indicator::after {
            width: 10px;
            height: 1px;
            left: -5px;
            top: 4px;
        }
    </style>
</head>
<body>
    <h3>Editor de Dibujo CAD Básico</h3>
    
    <!-- Agregar elementos para zoom y origen -->
    <div class="zoom-controls">
        <button class="zoom-button" id="zoomIn">+</button>
        <button class="zoom-button" id="zoomOut">-</button>
        <button class="zoom-button" id="zoomFit">□</button>
    </div>
    <div id="originIndicator2D" class="origin-indicator"></div>
    <div id="cursor3D" class="cursor3d"></div>
    
    <div style="border: 1px solid #ccc; margin-top: 15px; position: relative; background-color: #2d2d2d;">
        <canvas width="800" height="500" tabindex="0" id="lienzo"></canvas>
        <div id="coordCanvas" style="padding: 2px 5px; left: 5px; bottom: 5px; font-family: monospace; font-size: 12px; position: absolute; background-color: rgba(0, 0, 0, 0.7); color: white;">X: 0, Y: 0</div>
        <div id="lineInfo" style="padding: 2px 5px; right: 5px; bottom: 5px; font-family: monospace; font-size: 12px; position: absolute; background-color: rgba(0, 0, 0, 0.7); color: white;">Longitud: 0 | Ángulo: 0°</div>
        <div id="snapInfo" style="padding: 2px 5px; top: 5px; right: 5px; font-family: monospace; font-size: 12px; position: absolute; background-color: rgba(0, 0, 0, 0.7); color: white;"></div>
        <div id="entradaDimensiones" style="padding: 5px; border: 1px solid #999; left: 200px; bottom: 5px; display: none; position: absolute; background-color: rgba(0, 0, 0, 0.9); color: white;">
            <label>Distancia: <input id="inputDistancia" style="width: 80px; background-color: #333; color: white; border: 1px solid #666;" type="number" step="0.1"></label>
            <button id="btnAplicarDimensiones">Aplicar</button>
        </div>
        <div id="distanciaInfo" style="padding: 2px 5px; border-radius: 10px; font-family: monospace; font-size: 10px; display: none; position: absolute; background-color: rgba(0, 0, 0, 0.7); color: white;"></div>
        <div id="anguloVisual" style="padding: 2px 5px; border-radius: 10px; font-family: monospace; font-size: 10px; display: none; position: absolute; background-color: rgba(0, 0, 0, 0.7); color: white;"></div>
        <div id="distanciaVisual" style="padding: 2px 5px; border-radius: 3px; color: white; font-family: monospace; font-size: 12px; display: none; position: absolute; background-color: rgba(50, 50, 255, 0.8);"></div>
    </div>
    
    <!-- Contenedor para la vista 3D -->
    <div id="container3D" style="display: none; width: 800px; height: 500px; margin-top: 15px; border: 1px solid #ccc;"></div>
    
    <!-- Botón para activar/desactivar la vista 3D -->
    <button id="btnToggle3D" style="margin-top: 10px;">Activar Ventana 3D</button>
    
    <div style="margin-top: 10px;">
        <div id="coordenadasPrecisas" style="padding: 5px; border-radius: 3px; left: 10px; bottom: 45px; color: white; display: flex; position: absolute; align-items: center; background-color: #555;">
            <span style="margin-right: 10px;">Precise primer punto:</span>
            <input id="inputX" style="border: 1px solid #666; width: 70px; color: white; margin-right: 5px; background-color: #007bff;" type="number" step="0.1" value="0">
            <input id="inputY" style="border: 1px solid #666; width: 70px; color: black; background-color: #eee;" type="number" step="0.1" value="0">
        </div>
        
        <!-- Botones de herramientas -->
        <button title="Elipse" class="btn-icono" id="btnElipse">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                <ellipse fill="none" stroke="currentColor" stroke-width="2" cx="12" cy="12" rx="8" ry="5" />
                <circle fill="#3498db" cx="12" cy="12" r="2" />
            </svg>
            <span>Elipse</span>
        </button>
        
        <button title="Línea" class="btn-icono active" id="btnLinea">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                <line stroke="currentColor" stroke-width="2" x1="4" y1="20" x2="20" y2="4" />
                <circle fill="#3498db" cx="4" cy="20" r="2" />
                <circle fill="#3498db" cx="20" cy="4" r="2" />
            </svg>
            <span>Línea</span>
        </button>
        
        <button title="Polilínea" class="btn-icono" id="btnPolilinea">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                <path fill="none" stroke="currentColor" stroke-width="2" d="M 4 20 L 10 10 L 20 14" />
                <circle fill="#3498db" cx="4" cy="20" r="2" />
                <circle fill="#3498db" cx="10" cy="10" r="2" />
                <circle fill="#3498db" cx="20" cy="14" r="2" />
            </svg>
            <span>Polilínea</span>
        </button>
        
        <button title="Rectángulo" class="btn-icono" id="btnRectangulo">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                <rect fill="none" stroke="currentColor" stroke-width="2" x="4" y="4" width="16" height="16" />
                <circle fill="#3498db" cx="4" cy="4" r="2" />
                <circle fill="#3498db" cx="20" cy="20" r="2" />
            </svg>
            <span>Rectángulo</span>
        </button>
        
        <button title="Círculo" class="btn-icono" id="btnCirculo">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                <circle fill="none" stroke="currentColor" stroke-width="2" cx="12" cy="12" r="8" />
                <circle fill="#3498db" cx="12" cy="12" r="2" />
                <line stroke="#3498db" stroke-width="1" x1="12" y1="12" x2="20" y2="12" />
            </svg>
            <span>Círculo</span>
        </button>
        
        <button title="Arco" class="btn-icono" id="btnArco">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                <path fill="none" stroke="currentColor" stroke-width="2" d="M 4 20 Q 12 4 20 20" />
                <circle fill="#3498db" cx="4" cy="20" r="2" />
                <circle fill="#3498db" cx="20" cy="20" r="2" />
                <circle fill="#3498db" cx="12" cy="4" r="2" />
            </svg>
            <span>Arco</span>
        </button>
        
        <button title="Mano" class="btn-icono" id="btnMano">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                <path fill="none" stroke="currentColor" stroke-width="2" d="M7,11 C7,8 9,7 11,7 C13,7 13,8 13,9 L13,16 C13,16 14,16 14,14 L14,8 C14,6 16,6 16,8 L16,16 C16,16 17,16 17,14 L17,10 C17,8 19,8 19,10 L19,17 C19,21 17,22 14,22 C11,22 7,22 7,17 Z" />
            </svg>
            <span>Mano</span>
        </button>
        
        <button id="btnDimension">Entrada Dimensiones</button>
        <button id="btnRestriccion">Restricción 90° (OFF)</button>
        <button id="btnSnap">Snap (OFF)</button>
        
        <div id="menuSnapObjetos" style="padding: 10px; border-radius: 5px; color: white; display: none; position: absolute; z-index: 1000; box-shadow: 0px 2px 10px rgba(0,0,0,0.3); background-color: #2c3e50;">
            <div><input id="snapPuntoFinal" type="checkbox" checked><label for="snapPuntoFinal"> Punto final</label></div>
            <div><input id="snapPuntoMedio" type="checkbox" checked><label for="snapPuntoMedio"> Punto medio</label></div>
            <div><input id="snapCentro" type="checkbox" checked><label for="snapCentro"> Centro</label></div>
            <div><input id="snapCentroGeometrico" type="checkbox"><label for="snapCentroGeometrico"> Centro geométrico</label></div>
            <div><input id="snapPunto" type="checkbox" checked><label for="snapPunto"> Punto</label></div>
            <div><input id="snapCuadrante" type="checkbox" checked><label for="snapCuadrante"> Cuadrante</label></div>
            <div><input id="snapInterseccion" type="checkbox"><label for="snapInterseccion"> Intersección</label></div>
            <div><input id="snapExtension" type="checkbox"><label for="snapExtension"> Extensión</label></div>
            <div><input id="snapInsercion" type="checkbox"><label for="snapInsercion"> Inserción</label></div>
            <div><input id="snapPerpendicular" type="checkbox"><label for="snapPerpendicular"> Perpendicular</label></div>
            <div><input id="snapTangente" type="checkbox"><label for="snapTangente"> Tangente</label></div>
            <div><input id="snapCercano" type="checkbox"><label for="snapCercano"> Cercano</label></div>
            <div><input id="snapInterseccionFicticia" type="checkbox"><label for="snapInterseccionFicticia"> Intersección ficticia</label></div>
            <div><input id="snapParalelo" type="checkbox"><label for="snapParalelo"> Paralelo</label></div>
        </div>
        
        <div id="modalAtajos" style="padding: 15px; border-radius: 5px; left: 50%; top: 50%; width: 90%; color: white; display: none; position: absolute; z-index: 1000; max-width: 400px; box-shadow: 0px 2px 15px rgba(0,0,0,0.4); transform: translate(-50%, -50%); background-color: #2c3e50;">
            <h3 style="padding-bottom: 8px; margin-top: 0px; border-bottom: 1px solid #eee;">Atajos de Teclado</h3>
            <div style="margin-bottom: 15px;">
                <div style="margin-bottom: 8px; display: flex; justify-content: space-between;"><strong>ESC</strong><span>Cancelar operación actual</span></div>
                <div style="margin-bottom: 8px; display: flex; justify-content: space-between;"><strong>F8</strong><span>Activar/desactivar restricción 90°</span></div>
                <div style="margin-bottom: 8px; display: flex; justify-content: space-between;"><strong>Ctrl+Z</strong><span>Deshacer</span></div>
            </div>
            <button id="cerrarModalAtajos" style="background: #3498db; padding: 5px 10px; border-radius: 3px; border: none; color: white; float: right; cursor: pointer;">Cerrar</button>
            <div style="clear: both;"></div>
        </div>
        
        <button id="btnRejilla">Rejilla (OFF)</button>
        <button id="btnSnapGrid">Snap a Rejilla (OFF)</button>
        <button id="btnDeshacer">Deshacer (Ctrl+Z)</button>
        <button id="btnLimpiar">Limpiar lienzo</button>
        <button id="btnGuardarSVG">Guardar SVG</button>
        <button id="btnImportarSVG">Importar SVG</button>
        <textarea id="svgOutput" style="width: 100%; height: 150px; font-family: monospace; margin-top: 10px; display: none;"></textarea>
        <button id="btnAtajos">Atajos de Teclado</button>
        
        <!-- Modal para importar/pegar SVG -->
        <div id="modalImportarSVG" style="display: none; position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.4);">
            <div style="background-color: #fefefe; margin: 15% auto; padding: 20px; border: 1px solid #888; width: 80%; max-width: 600px; border-radius: 5px;">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                    <h2 style="margin: 0;">Importar SVG</h2>
                    <button id="cerrarModalImportarSVG" style="background: none; border: none; font-size: 24px; cursor: pointer;">&times;</button>
                </div>
                
                <div style="margin-bottom: 15px;">
                    <h3>Cargar archivo SVG</h3>
                    <input type="file" id="inputArchivoSVG" accept=".svg">
                </div>
                
                <div style="margin-bottom: 15px;">
                    <h3>Pegar código SVG</h3>
                    <textarea id="textareaSVG" rows="10" style="width: 100%; resize: vertical;"></textarea>
                </div>
                
                <div style="display: flex; justify-content: space-between;">
                    <button id="btnPegarSVG" style="background-color: #3498db; color: white; border: none; padding: 10px 15px; border-radius: 3px; cursor: pointer;">Pegar SVG</button>
                    <button id="btnCargarSVG" style="background-color: #2ecc71; color: white; border: none; padding: 10px 15px; border-radius: 3px; cursor: pointer;">Cargar SVG</button>
                </div>
            </div>
        </div>
    </div>
    <script>
        // Inicialización de Three.js
        let scene, camera, renderer, controls;
        const container3D = document.getElementById('container3D');
        const btnToggle3D = document.getElementById('btnToggle3D');
        let line3D = null; // Para almacenar la línea actual en 3D
        let lineMaterial = new THREE.LineBasicMaterial({ color: 0xffffff });
        let lineGeometry = new THREE.BufferGeometry();
        let linePoints = [];

        function init3D() {
            // Crear escena, cámara y renderizador
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, container3D.clientWidth / container3D.clientHeight, 0.1, 1000);
            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setSize(container3D.clientWidth, container3D.clientHeight);
            renderer.setClearColor(0x000000, 1);
            container3D.appendChild(renderer.domElement);

            // Configurar la cámara en posición isométrica
            camera.position.set(5, 5, 5);
            camera.lookAt(0, 0, 0);

            // Agregar controles de cámara
            controls = new THREE.OrbitControls(camera, renderer.domElement);
            controls.enableDamping = true;
            controls.dampingFactor = 0.05;
            controls.update();

            // Agregar luces
            const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
            scene.add(ambientLight);
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
            directionalLight.position.set(5, 5, 5);
            scene.add(directionalLight);

            // Crear plano de referencia XY
            const planoGeometry = new THREE.PlaneGeometry(10, 10);
            const planoMaterial = new THREE.MeshBasicMaterial({ 
                color: 0x404040, 
                side: THREE.DoubleSide,
                transparent: true,
                opacity: 0.2,
                wireframe: true
            });
            const plano = new THREE.Mesh(planoGeometry, planoMaterial);
            scene.add(plano);

            // Crear ejes
            const axesHelper = new THREE.AxesHelper(5);
            scene.add(axesHelper);

            // Crear etiquetas para los ejes
            const createAxisLabel = (text, position, color) => {
                const canvas = document.createElement('canvas');
                const context = canvas.getContext('2d');
                canvas.width = 64;
                canvas.height = 64;
                context.fillStyle = color;
                context.font = '24px Arial';
                context.textAlign = 'center';
                context.textBaseline = 'middle';
                context.fillText(text, 32, 32);

                const texture = new THREE.CanvasTexture(canvas);
                const material = new THREE.SpriteMaterial({ map: texture });
                const sprite = new THREE.Sprite(material);
                sprite.position.copy(position);
                sprite.scale.set(1, 1, 1);
                scene.add(sprite);
            };

            // Agregar etiquetas a los ejes
            createAxisLabel('X', new THREE.Vector3(5.5, 0, 0), '#ff0000');
            createAxisLabel('Y', new THREE.Vector3(0, 5.5, 0), '#00ff00');
            createAxisLabel('Z', new THREE.Vector3(0, 0, 5.5), '#0000ff');

            // Función de animación
            function animate() {
                requestAnimationFrame(animate);
                controls.update();
                renderer.render(scene, camera);
            }
            animate();
        }

        // Función para convertir coordenadas 2D a 3D
        function convert2Dto3D(x, y) {
            // Convertir coordenadas del canvas a coordenadas 3D
            // X e Y se mantienen en el plano horizontal
            const x3D = (x - 400) / 50; // Ajustar escala y centrar
            const y3D = (250 - y) / 50; // Invertir Y y ajustar escala
            return new THREE.Vector3(x3D, y3D, 0); // Z es 0 para mantener en plano XY
        }

        // Función para crear una línea en 3D
        function createLine3D(x1, y1, x2, y2) {
            const startPoint = convert2Dto3D(x1, y1);
            const endPoint = convert2Dto3D(x2, y2);
            
            const geometry = new THREE.BufferGeometry();
            const vertices = new Float32Array([
                startPoint.x, startPoint.y, startPoint.z,
                endPoint.x, endPoint.y, endPoint.z
            ]);
            geometry.setAttribute('position', new THREE.BufferAttribute(vertices, 3));
            
            const material = new THREE.LineBasicMaterial({ color: 0xffffff });
            const line = new THREE.Line(geometry, material);
            scene.add(line);
            return line;
        }

        // Evento para mostrar/ocultar la ventana 3D
        btnToggle3D.addEventListener('click', function() {
            if (container3D.style.display === 'none') {
                container3D.style.display = 'block';
                btnToggle3D.textContent = 'Desactivar Ventana 3D';
                init3D();
            } else {
                container3D.style.display = 'none';
                btnToggle3D.textContent = 'Activar Ventana 3D';
            }
        });

document.addEventListener("DOMContentLoaded", function() {
    // Declaración de variables
    var puntosArco = [];
    var puntosPolilinea = []; 
    var dibujarPolilineaEnProgreso = false;
    var tiposSnap = {
        puntoFinal: true,
        puntoMedio: true,
        centro: true,
        centroGeometrico: false,
        punto: true,
        cuadrante: true,
        interseccion: false,
        extension: false,
        insercion: false,
        perpendicular: false,
        tangente: false,
        cercano: false,
        interseccionFicticia: false,
        paralelo: false
    };
    
    var canvas = document.getElementById("lienzo");
    var ctx = canvas.getContext("2d");
    var snapToGridActivo = false;
    var coordenadasPrecisasActivas = true;
    var inputXElement = null;
    var inputYElement = null;
    var dibujando = false;
    var modoActual = "linea";
    var dibujarArcoEnProgreso = false;
    var puntoInicial = null;
    var xAnterior, yAnterior;
    var coordsElement = document.getElementById("coordCanvas");
    var lineInfoElement = document.getElementById("lineInfo");
    var anguloVisualElement = document.getElementById("anguloVisual");
    var snapInfoElement = document.getElementById("snapInfo");
    var distanciaInfoElement = document.getElementById("distanciaInfo");
    var entradaDimensionesElement = document.getElementById("entradaDimensiones");
    var inputDistanciaElement = document.getElementById("inputDistancia");
    var canvasState = null;
    var restriccionAngulo = false;
    var snapActivo = false;
    var dimensionManualActiva = false;
    var anguloActual = 0;
    var formas = [];
    var snapPuntos = [];
    var lineaPuntosCercanos = [];
    var historialEstados = [];
    var posicionHistorial = -1;
    var MAX_HISTORIAL = 20;
    var distanciaVisualElement = document.getElementById("distanciaVisual");
    var rejillaActiva = false;
    var tamanoRejilla = 20;
    
    // Crear elementos visuales dinámicos
    var ortoVisualElement = document.createElement("div");
    ortoVisualElement.style.position = "absolute";
    ortoVisualElement.style.display = "none";
    ortoVisualElement.style.fontFamily = "monospace";
    ortoVisualElement.style.fontSize = "12px";
    ortoVisualElement.style.backgroundColor = "#666666";
    ortoVisualElement.style.color = "white";
    ortoVisualElement.style.padding = "2px 5px";
    ortoVisualElement.style.borderRadius = "3px";
    canvas.parentElement.appendChild(ortoVisualElement);
    
    var anguloInfoElement = document.createElement("div");
    anguloInfoElement.style.position = "absolute";
    anguloInfoElement.style.display = "none";
    anguloInfoElement.style.fontFamily = "monospace";
    anguloInfoElement.style.fontSize = "12px";
    anguloInfoElement.style.backgroundColor =
